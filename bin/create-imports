#!/usr/bin/env python
"""
create-imports module1 module2...

Create imports using all non-private members of the given modules, that were
defined in that module (or a submodule).

Print the result to stdout.

"""

from __future__ import absolute_import, division, with_statement

import sys

from   pyflyby.cmdline          import hfmt, parse_args
from   pyflyby.importdb         import global_known_imports
from   pyflyby.importstmt       import ImportStatement, Imports
from   pyflyby.modules          import import_module


def main():
    def addopts(parser):
        parser.add_option("--ignore-known", default=False, action='store_true',
                          help=hfmt('''
                                Don't list imports already in the
                                known-imports database.'''))
        parser.add_option("--no-ignore-known", dest="ignore_known",
                          action='store_false',
                          help=hfmt('''
                                (Default) List all imports, including those
                                already in the known-imports database.'''))
        parser.add_option("--expand-known", default=False, action='store_true',
                          help=hfmt('''
                                Scan all modules mentioned in known-imports
                                database.'''))
        parser.add_option("--no-expand-known", dest="expand_known",
                          action='store_false',
                          help=hfmt('''
                                (Default) Scan only modules listed explicitly
                                on the command line.'''))
    options, args = parse_args(addopts, import_format_params=True)
    if options.expand_known:
        db = global_known_imports()
        args += sorted(set(
                filter(None, [i.split.module_name for i in db.imports])))
    for module_name in args:
        module = import_module(module_name)
        try:
            members = module.__all__
        except AttributeError:
            members = dir(module)
            # Filter by non-private.
            members = [n for n in members if not n.startswith("_")]
            # Filter by definition in the module.
            def from_this_module(name):
                x = getattr(module, name)
                m = getattr(x, "__module__", None)
                if not m:
                    return False
                return m == module_name or m.startswith("%s." % (module_name,))
            members = [n for n in members if from_this_module(n)]
        if not members:
            continue
        imports = Imports(
            [ ImportStatement.from_parts(module_name, members) ])
        if options.ignore_known:
            db = global_known_imports()
            imports = imports.without_imports(db, strict=False)
        sys.stdout.write(imports.pretty_print(
                allow_conflicts=True, params=options.params))


if __name__ == '__main__':
    main()
