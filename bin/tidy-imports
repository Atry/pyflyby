#!/usr/bin/env python
"""
tidy-imports *.py
tidy-imports < foo.py

Automatically improves python import statements.

  - Adds missing imports and mandatory imports.
  - Removes unused imports.
  - Nicely formats imports (sorts, aligns, wraps).

If filenames are given on the command line, rewrites them.  Otherwise, if
stdin is not a tty, read from stdin and write to stdout.

Only top-level import statements are touched.

"""

from __future__ import absolute_import, division, with_statement

from   pyflyby.cmdline          import filename_args, hfmt, parse_args
from   pyflyby.imports2s        import (fix_unused_and_missing_imports,
                                        replace_star_imports,
                                        transform_imports)

def main():
    def addopts(parser):
        parser.add_option('--add-missing',
                          default=True, action='store_true',
                          help=hfmt('''
                              (Default) Add missing imports.'''))
        parser.add_option('--no-add-missing', dest='add_missing',
                          default=True, action='store_false',
                          help=hfmt('''
                              Don't add missing imports.'''))
        parser.add_option('--remove-unused',
                          default=True, action='store_true',
                          help=hfmt('''
                              (Default) Remove unused imports.'''))
        parser.add_option('--no-remove-unused', dest='remove_unused',
                          default=True, action='store_false',
                          help=hfmt('''
                              Don't remove unused imports.'''))
        parser.add_option('--add-mandatory',
                          default=True, action='store_true',
                          help=hfmt('''
                              (Default) Add mandatory imports.'''))
        parser.add_option('--no-add-mandatory', dest='add_mandatory',
                          default=True, action='store_false',
                          help=hfmt('''
                              Don't add mandatory imports.'''))
        parser.add_option('--replace-star-imports',
                          default=False, action='store_true',
                          help=hfmt('''
                              Replace 'from foo.bar import *' with full list
                              of imports before removing unused imports.'''))
        parser.add_option('--no-replace-star-imports',
                          dest='replace_star_imports',
                          action='store_false',
                          help=hfmt('''
                              (Default) Don't replace 'from foo.bar import
                              *'.'''))
        def transform_callback(option, opt_str, value, group):
            k, v = value.split("=", 1)
            group.values.transformations[k] = v
        parser.add_option("--transform", action='callback',
                          type="string", callback=transform_callback,
                          metavar="OLD=NEW",
                          dest="transformations", default={},
                          help=hfmt('''
                                Replace OLD with NEW in imports.
                                May be specified multiple times.'''))
        def no_add_callback(option, opt_str, value, group):
            group.values.add_missing = False
            group.values.add_mandatory = False
        parser.add_option('--no-add', action='callback',
                          callback=no_add_callback,
                          help=hfmt('''
                              Equivalent to --no-add-missing
                              --no-add-mandatory.'''))
    options, args = parse_args(
        addopts, import_format_params=True, modify_action_params=True)
    @options.action
    def modify(x):
        if options.transformations:
            x = transform_imports(x, options.transformations,
                                  params=options.params)
        if options.replace_star_imports:
            x = replace_star_imports(x, params=options.params)
        return fix_unused_and_missing_imports(
            x, params=options.params,
            add_missing=options.add_missing,
            remove_unused=options.remove_unused,
            add_mandatory=options.add_mandatory,
            )
    for filename in filename_args(args):
        modify(filename)


if __name__ == '__main__':
    main()
