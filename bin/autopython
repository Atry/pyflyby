#!/usr/bin/env python
"""
autopython [-c cmd | file] [arg] ...

autopython runs the specified python code with automatic importing.

Example:
  $ autopython -c "b64decode('aGVsbG8=')"
  [PYFLYBY] from base64 import b64decode
  'hello'

This is shorthand for:
  $ python -c "from base64 import b64decode; print repr(b64decode('aGVsbG8='))"
  'hello'

Warning: This tool is intended for interactive use only.

For production, you should use tidy-imports to safely ensure your code has the
proper imports.
"""

# pyflyby/autopython
# Copyright (C) 2014 Karl Chen.
# License: MIT http://opensource.org/licenses/MIT

from __future__ import absolute_import, division, with_statement

import sys

from   pyflyby._autoimp         import auto_eval
from   pyflyby._cmdline         import maindoc, syntax
from   pyflyby._file            import Filename
from   pyflyby._log             import logger


FLAGS = ["absolute_import", "with_statement", "division"]


def cmdline_auto_eval(arg, cmdline_args):
    sys.argv = cmdline_args
    result = auto_eval(arg, flags=FLAGS,
                       globals={"__name__": "__main__"})
    if result is not None:
        print repr(result)


def main(args):
    # Parse log-level options.  For now, we do a primitive manual thing here
    # instead of using optparse because we don't want to parse anything after
    # '-c' 'code...', but it's hard to do this with optparse.  Todo: use
    # argparse, once we're willing to use it as a hard dependency,
    while args:
        if args[0] in ['--debug', '-debug', '--verbose', '-verbose']:
            logger.set_level("DEBUG")
            del args[0]
            continue
        if args[0] in ['--quiet', '-quiet', '-q']:
            logger.set_level("ERROR")
            del args[0]
            continue
        if args[0] in ['--help', '-help', '-h']:
            print maindoc()
            raise SystemExit
        break
    if not args:
        syntax()
    if args[0][:2] == '-c':
        if len(args[0]) > 2:
            cmd = args[0][2:]
            args = ['-c'] + args[1:]
        else:
            if len(args) < 2:
                syntax()
            cmd = args[1]
            args = ['-c'] + args[2:]
        cmdline_auto_eval(cmd, args)
    # We intentionally don't support '-m'.  Modules should always have the
    # correct imports.
    elif args[0][0] == '-':
        syntax()
    else:
        cmdline_auto_eval(Filename(args[0]), args)


if __name__ == "__main__":
    main(sys.argv[1:])
